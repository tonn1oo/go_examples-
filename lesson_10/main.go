package main

import (
	"fmt"
	"sync"
	"time"
)

/// Mutex - взаимное исключение, способ защиты критических секций (это способ защиты крит секций)
/// критическая секция это область преложения которая требует эксклюзивного доступа к ресурса бд, файлу

type Counter struct { // создаем структуру
	mu sync.Mutex     // создаем Mutex
	c  map[string]int // создаем счетчик
}

func (c *Counter) Inc(key string) { // делаем метод у счетчика
	c.mu.Lock()   // надо залочить
	c.c[key]++    // берет из счетчика по ключу и пребавляет 1
	c.mu.Unlock() // после того как произвели действие над мапой  разлочиить , код в середине критическая секция
}
func (c *Counter) Value(key string) int { // так же сделаем метод Value который нам позволит получить
	// значение по ключу
	return c.c[key] //  и вернуть его

}

func main() {
	key := "test"
	c := Counter{c: make(map[string]int)} // создаем счетчик
	for i := 0; i < 1000; i++ {           // создаем цикл цикл цикл 1000 горутин,
		// которые берут ключ "test" и увеличивают на 1 значение по этому ключу
		go c.Inc(key)

	}

	time.Sleep(time.Second * 3) // засыпаем на 3 секунды
	fmt.Println(c.Value(key))   ///вызаваем Counter и возьмем Value

}
